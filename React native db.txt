
import SQLite, { SQLiteDatabase, ResultSet } from 'react-native-sqlite-storage';

SQLite.DEBUG(true);
SQLite.enablePromise(true);

const databaseConfig = {
  name: "MyDatabase.db",
  location: "nosync",
};

interface Item {
  id?: number;
  name: string;
  description: string;
  new_column?: string;
}

class DatabaseService {
  private readOnly: boolean = false;

  private async initDB(): Promise<SQLiteDatabase> {
    try {
      return await SQLite.openDatabase(databaseConfig);
    } catch (error) {
      console.error('Failed to open database:', error);
      throw error;
    }
  }

  private closeDatabase(db: SQLiteDatabase): void {
    db.close().catch(error => console.error('Failed to close database:', error));
  }

  setReadOnlyMode(isReadOnly: boolean): void {
    this.readOnly = isReadOnly;
  }

  async createTable(): Promise<void> {
    if (this.readOnly) throw new Error("Database is in read-only mode");
    const db = await this.initDB();
    await db.executeSql(`
      CREATE TABLE IF NOT EXISTS items (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT,
        description TEXT
      )
    `);
    this.closeDatabase(db);
  }

  async addItem(item: Item): Promise<ResultSet> {
    if (this.readOnly) throw new Error("Database is in read-only mode");
    const db = await this.initDB();
    const result = await db.executeSql('INSERT INTO items (name, description) VALUES (?, ?)', [item.name, item.description]);
    this.closeDatabase(db);
    return result[0];
  }

  async updateItem(id: number, item: Item): Promise<ResultSet> {
    if (this.readOnly) throw new Error("Database is in read-only mode");
    const db = await this.initDB();
    const result = await db.executeSql('UPDATE items SET name = ?, description = ? WHERE id = ?', [item.name, item.description, id]);
    this.closeDatabase(db);
