npm install react-native-sqlite-storage
npm install --save-dev @types/react-native-sqlite-storage


import SQLite, { SQLiteDatabase, ResultSet } from 'react-native-sqlite-storage';

SQLite.DEBUG(true);
SQLite.enablePromise(true);

const database_name = "MyDatabase.db";
const database_version = "1.0";
const database_displayname = "My SQLite Database";
const database_size = 200000;

interface Item {
  id?: number;
  name: string;
  description: string;
  new_column?: string;
}

class DatabaseService {
  initDB(): Promise<SQLiteDatabase> {
    return SQLite.openDatabase(
      database_name,
      database_version,
      database_displayname,
      database_size
    );
  }

  closeDatabase(db: SQLiteDatabase): void {
    db.close()
      .then(() => console.log("Database closed"))
      .catch(error => console.error(error));
  }

  createTable(): Promise<void> {
    return this.initDB().then(db => {
      return db.transaction(tx => {
        tx.executeSql(`CREATE TABLE IF NOT EXISTS items (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          name TEXT,
          description TEXT
        )`);
      }).then(() => {
        this.closeDatabase(db);
      }).catch(error => console.error(error));
    });
  }

  addItem(item: Item): Promise<ResultSet> {
    return this.initDB().then(db => {
      return db.transaction(tx => {
        return tx.executeSql('INSERT INTO items (name, description) VALUES (?, ?)', [item.name, item.description]);
      }).then(([tx, results]) => {
        this.closeDatabase(db);
        return results;
      }).catch(error => console.error(error));
    });
  }

  updateItem(id: number, item: Item): Promise<ResultSet> {
    return this.initDB().then(db => {
      return db.transaction(tx => {
        return tx.executeSql('UPDATE items SET name = ?, description = ? WHERE id = ?', [item.name, item.description, id]);
      }).then(([tx, results]) => {
        this.closeDatabase(db);
        return results;
      }).catch(error => console.error(error));
    });
  }

  deleteItem(id: number): Promise<ResultSet> {
    return this.initDB().then(db => {
      return db.transaction(tx => {
        return tx.executeSql('DELETE FROM items WHERE id = ?', [id]);
      }).then(([tx, results]) => {
        this.closeDatabase(db);
        return results;
      }).catch(error => console.error(error));
    });
  }

  getItems(): Promise<Item[]> {
    return this.initDB().then(db => {
      return db.transaction(tx => {
        return tx.executeSql('SELECT * FROM items', []);
      }).then(([tx, results]) => {
        let len = results.rows.length;
        let items: Item[] = [];
        for (let i = 0; i < len; i++) {
          let row = results.rows.item(i);
          items.push(row);
        }
        this.closeDatabase(db);
        return items;
      }).catch(error => console.error(error));
    });
  }

  updateDatabaseVersion(newVersion: number): Promise<void> {
    return SQLite.openDatabase(
      database_name,
      database_version,
      database_displayname,
      database_size
    ).then(db => {
      return db.transaction(tx => {
        return tx.executeSql(`PRAGMA user_version`).then(([tx, results]) => {
          let currentVersion = results.rows.item(0).user_version;
          if (currentVersion < newVersion) {
            // Execute alter table statements here based on version
            tx.executeSql('ALTER TABLE items ADD COLUMN new_column TEXT');
            tx.executeSql(`PRAGMA user_version = ${newVersion}`);
          }
        });
      }).then(() => {
        this.closeDatabase(db);
      }).catch(error => console.error(error));
    });
  }
}

export default new DatabaseService();


import React, { useEffect, useState } from 'react';
import { View, Text, Button } from 'react-native';
import DatabaseService from './DatabaseService';

interface Item {
  id: number;
  name: string;
  description: string;
  new_column?: string;
}

const App: React.FC = () => {
  const [items, setItems] = useState<Item[]>([]);

  useEffect(() => {
    DatabaseService.createTable();
    DatabaseService.updateDatabaseVersion(2);
    fetchItems();
  }, []);

  const fetchItems = () => {
    DatabaseService.getItems().then((data) => {
      setItems(data);
    });
  };

  const addItem = () => {
    const newItem: Item = { name: 'New Item', description: 'Item Description' };
    DatabaseService.addItem(newItem).then(() => {
      fetchItems();
    });
  };

  const updateItem = (id: number) => {
    const updatedItem: Item = { name: 'Updated Item', description: 'Updated Description' };
    DatabaseService.updateItem(id, updatedItem).then(() => {
      fetchItems();
    });
  };

  const deleteItem = (id: number) => {
    DatabaseService.deleteItem(id).then(() => {
      fetchItems();
    });
  };

  return (
    <View>
      <Button title="Add Item" onPress={addItem} />
      {items.map((item) => (
        <View key={item.id}>
          <Text>{item.name}</Text>
          <Text>{item.description}</Text>
          <Button title="Update" onPress={() => updateItem(item.id)} />
          <Button title="Delete" onPress={() => deleteItem(item.id)} />
        </View>
      ))}
    </View>
  );
};

export default App;


